- Use Dart language best practices.
- Use `StatelessWidget` when the widget does not require mutable state.
- Use `StatefulWidget` only when the widget needs to manage state.
- Use `const` constructors whenever possible.
- Use `final` for variables that do not change.
- Use `late` only when necessary and avoid using `var` unless type inference is clear.
- Use `SizedBox` or `Padding` for spacing instead of empty `Container`.
- Use `Theme.of(context)` for colors and text styles instead of hardcoding values.
- Name widgets and variables using lowerCamelCase.
- Name classes using UpperCamelCase.
- Add documentation comments (`///`) for all public classes and methods.
- Avoid using magic numbers; use constants instead.
- Use `ListView.builder` for long or dynamic lists.
- Prefer composition over inheritance.
- Avoid using deprecated Flutter APIs.
- Use null safety features.
- Use `const` for widgets that do not depend on runtime values.
- Separate UI and business logic (e.g., use Provider, Riverpod, Bloc, etc.).
- Organize files by feature or layer (e.g., `widgets/`, `models/`, `screens/`, `services/`).
- Write unit and widget tests for critical features.